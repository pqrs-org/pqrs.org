<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extra documents on Karabiner-Elements</title>
    <link>/docs/json/extra/</link>
    <description>Recent content in Extra documents on Karabiner-Elements</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="/docs/json/extra/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MultitouchExtension integration</title>
      <link>/docs/json/extra/multitouch-extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/json/extra/multitouch-extension/</guid>
      <description>Karabiner-MultitouchExtension allows you to change keys only when the finger is on the trackpad.&#xA;You can use variable_if or variable_unless to determine either the finger is on trackpad.&#xA;Example The following json changes k key to up_arrow when the finger is on the trackpad.&#xA;{ &amp;#34;type&amp;#34;: &amp;#34;basic&amp;#34;, &amp;#34;from&amp;#34;: { &amp;#34;key_code&amp;#34;: &amp;#34;k&amp;#34;, &amp;#34;modifiers&amp;#34;: { &amp;#34;optional&amp;#34;: [&amp;#34;any&amp;#34;] } }, &amp;#34;to&amp;#34;: [ { &amp;#34;key_code&amp;#34;: &amp;#34;up_arrow&amp;#34; } ], &amp;#34;conditions&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;variable_unless&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;multitouch_extension_finger_count_total&amp;#34;, &amp;#34;value&amp;#34;: 0 } ] } Variables Karabiner-MultitouchExtension changes the following variables when the finger count on the trackpad is changed.</description>
    </item>
    <item>
      <title>Virtual modifier</title>
      <link>/docs/json/extra/virtual-modifier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/json/extra/virtual-modifier/</guid>
      <description>Karabiner-Elements does not provide virtual modifiers, however you can make your own flag similar to virtual modifier using variables.&#xA;Example The following json change keypad_1 to virtual modifier.&#xA;Change keypad_1 to virtual modifier (my_modifier_1). Change keypad_1 + a to mission_control. Change keypad_1 + s to launchpad. [ { &amp;#34;type&amp;#34;: &amp;#34;basic&amp;#34;, &amp;#34;from&amp;#34;: { &amp;#34;key_code&amp;#34;: &amp;#34;keypad_1&amp;#34;, &amp;#34;modifiers&amp;#34;: { &amp;#34;mandatory&amp;#34;: [], &amp;#34;optional&amp;#34;: [&amp;#34;any&amp;#34;] } }, &amp;#34;to&amp;#34;: [ { &amp;#34;set_variable&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;my_modifier_1&amp;#34;, &amp;#34;value&amp;#34;: 1 } } ], &amp;#34;to_after_key_up&amp;#34;: [ { &amp;#34;set_variable&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;my_modifier_1&amp;#34;, &amp;#34;value&amp;#34;: 0 } } ] }, { &amp;#34;type&amp;#34;: &amp;#34;basic&amp;#34;, &amp;#34;from&amp;#34;: { &amp;#34;key_code&amp;#34;: &amp;#34;a&amp;#34;, &amp;#34;modifiers&amp;#34;: { &amp;#34;mandatory&amp;#34;: [], &amp;#34;optional&amp;#34;: [&amp;#34;any&amp;#34;] } }, &amp;#34;to&amp;#34;: [ { &amp;#34;key_code&amp;#34;: &amp;#34;mission_control&amp;#34; } ], &amp;#34;conditions&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;variable_if&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;my_modifier_1&amp;#34;, &amp;#34;value&amp;#34;: 1 } ] }, { &amp;#34;type&amp;#34;: &amp;#34;basic&amp;#34;, &amp;#34;from&amp;#34;: { &amp;#34;key_code&amp;#34;: &amp;#34;s&amp;#34;, &amp;#34;modifiers&amp;#34;: { &amp;#34;mandatory&amp;#34;: [], &amp;#34;optional&amp;#34;: [&amp;#34;any&amp;#34;] } }, &amp;#34;to&amp;#34;: [ { &amp;#34;key_code&amp;#34;: &amp;#34;launchpad&amp;#34; } ], &amp;#34;conditions&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;variable_if&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;my_modifier_1&amp;#34;, &amp;#34;value&amp;#34;: 1 } ] } ] </description>
    </item>
  </channel>
</rss>
